plugins {
    id 'com.android.application'
    id 'jacoco'
}

android {
    compileSdk 34

    // This is the build configuration for your project.
    def localProperties = new Properties()
    localProperties.load(new FileInputStream(rootProject.file("local.properties")))

    defaultConfig {
        applicationId "edu.uiuc.cs427app"
        minSdk 29
        targetSdk 34
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "GEMINI_API_KEY", "\"${localProperties['GEMINI_API_KEY']}\""
        resValue("string", "google_maps_key", localProperties['MAPS_API_KEY'])
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures {
        viewBinding true
    }
    namespace 'edu.uiuc.cs427app'
}

dependencies {
    implementation 'androidx.annotation:annotation:1.6.0'
    implementation 'androidx.fragment:fragment:1.8.5'
    def room_version = "2.5.2"

    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.navigation:navigation-fragment:2.8.3'
    implementation 'androidx.navigation:navigation-ui:2.8.3'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.5.1'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.5.1'
    androidTestImplementation 'org.mockito:mockito-android:5.5.0'


    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.1"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.6.1"
    testImplementation 'org.mockito:mockito-core:5.5.0'
    testImplementation 'org.mockito:mockito-inline:4.8.1'

    implementation 'com.squareup.okhttp3:okhttp:4.9.3'
    implementation 'com.google.code.gson:gson:2.10.1'

    implementation("com.google.ai.client.generativeai:generativeai:0.7.0")

    implementation("com.google.guava:guava:31.0.1-android")

    implementation("org.reactivestreams:reactive-streams:1.0.4")
    implementation 'com.google.android.gms:play-services-maps:18.0.2'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test:rules:1.5.0'

    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.5.1'
    // Mockito for mocking
    testImplementation 'org.mockito:mockito-core:4.8.1'  // Adjust the version if necessary
    androidTestImplementation 'org.mockito:mockito-android:4.8.1'  // For Android-specific mocking

    // AndroidX Testing libraries
    androidTestImplementation 'androidx.test:core:1.5.0'           // For basic Android testing
    androidTestImplementation 'androidx.test:rules:1.5.0'          // For GrantPermissionRule

}

tasks.register("jacocoTestReport", JacocoReport) {
    dependsOn 'testDebugUnitTest' // Depends on the test task

    reports {
        xml.required = true
        html.required = true
    }

    def fileFilter = ['/R.class', '/R$.class', '/BuildConfig.', '/Manifest*.', '/*Test.*']
    def debugTree = fileTree(dir: "$buildDir/intermediates/javac/debug", excludes: fileFilter)

    sourceDirectories.setFrom(files(android.sourceSets.main.java.srcDirs))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
            ]))
}