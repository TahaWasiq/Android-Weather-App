package edu.uiuc.cs427app;

import android.os.Bundle;
import android.util.TypedValue;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;

import com.google.ai.client.generativeai.GenerativeModel;
import com.google.ai.client.generativeai.java.GenerativeModelFutures;
import com.google.ai.client.generativeai.type.Content;
import com.google.ai.client.generativeai.type.GenerateContentResponse;
import com.google.common.util.concurrent.FutureCallback;
import com.google.common.util.concurrent.Futures;
import com.google.common.util.concurrent.ListenableFuture;

import java.util.concurrent.Executor;
import java.util.concurrent.Executors;

public class LLMInsightsActivity extends AppCompatActivity {

    private LinearLayout insightsContainer;
    private GenerativeModelFutures model;
    private Executor executor;
    private String weatherData;
    private TextView answerView;

    /*
     * This activity uses the Generative AI model to generate context-specific questions and answers
     * based on the current weather data. The user can click on a question to get an answer.
     */
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        ThemeUtils.applyTheme(this);
        setContentView(R.layout.activity_llm_insights);

        insightsContainer = findViewById(R.id.insightsContainer);
        executor = Executors.newSingleThreadExecutor();

        String geminiAPIKey = BuildConfig.GEMINI_API_KEY;

        // Initialize the generative model with the Gemini model name and API key
        GenerativeModel gm = new GenerativeModel("gemini-1.5-flash", geminiAPIKey);
        model = GenerativeModelFutures.from(gm);

        // Initialize answer view and add it to the container
        answerView = new TextView(this);
        weatherData = getIntent().getStringExtra("weatherData");
        generateWeatherInsights(weatherData);
    }

    /*
     * Generate weather insights.
     * This method is used to generate context-specific questions based on the current weather data.
     * The questions are displayed on the screen as clickable buttons.
     */
    private void generateWeatherInsights(String weatherData) {
        String prompt = "Today's weather is: " + weatherData +
                ". Please generate a few (minimum 3) context-specific questions that users might ask to help them make decisions about their day. Don't give any extra text. Just add <question> and </question> tags for each question.";
        Content content = new Content.Builder().addText(prompt).build();

        ListenableFuture<GenerateContentResponse> response = model.generateContent(content);
        Futures.addCallback(response, new FutureCallback<GenerateContentResponse>() {
            @Override
            public void onSuccess(GenerateContentResponse result) {
                runOnUiThread(() -> displayInsights(result.getText()));
            }

            @Override
            public void onFailure(Throwable t) {
                runOnUiThread(() -> displayError("Error: " + t.getMessage()));
            }
        }, executor);
    }

    /*
     * Resolve the button background color from the current theme.
     * This method is used to get the background color of the buttons from the current theme.
     * The color is used to style the buttons that display the insights.
     */
    private int resolveButtonBackgroundColor() {
        TypedValue typedValue = new TypedValue();
        getTheme().resolveAttribute(android.R.attr.button, typedValue, true);
        return typedValue.data;
    }

    /*
     * Display the insights on the screen.
     * This method is used to show the insights generated by the API.
     * The insights are displayed as clickable buttons.
     */
    private void displayInsights(String answer) {
        // Retrieve the button background color from the current theme
        int backgroundColor = resolveButtonBackgroundColor();

        // Split the response text by <question> and </question> tags to extract individual questions
        String[] questions = answer.split("<question>|</question>");

        for (String question : questions) {
            question = question.trim();
            if (!question.isEmpty()) {
                Button questionButton = new Button(this);
                questionButton.setText(question);

                // Apply the resolved background color
                questionButton.setBackgroundColor(backgroundColor);

                // Add margin to the button
                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                        LinearLayout.LayoutParams.MATCH_PARENT,
                        LinearLayout.LayoutParams.WRAP_CONTENT
                );
                params.setMargins(0, 0, 0, 24);
                questionButton.setLayoutParams(params);

                // Set the click listener
                String finalQuestion = question;
                questionButton.setOnClickListener(view -> fetchAnswerForQuestion(finalQuestion));

                // Add the button to the container
                insightsContainer.addView(questionButton);
            }
        }

        // Add the answer view to the container
        insightsContainer.addView(answerView);
    }


    /*
     * Fetch the answer for a given question.
     * This method is used to generate an answer for a specific question using the Generative AI model.
     * The answer is displayed on the screen.
     * The question is passed as a parameter to the method.
     */
    private void fetchAnswerForQuestion(String question) {
        String prompt = "The current weather is " + weatherData + ". Question: " + question + ". Provide a brief and helpful response.";
        Content content = new Content.Builder().addText(prompt).build();

        ListenableFuture<GenerateContentResponse> response = model.generateContent(content);
        Futures.addCallback(response, new FutureCallback<GenerateContentResponse>() {
            @Override
            public void onSuccess(GenerateContentResponse result) {
                runOnUiThread(() -> displayAnswer(result.getText()));
            }

            @Override
            public void onFailure(Throwable t) {
                runOnUiThread(() -> displayError("Error: " + t.getMessage()));
            }
        }, executor);
    }

    /*
     * Display the answer on the screen.
     * This method is used to show the answer generated by the API.
     * The answer is displayed in a TextView.
     */
    private void displayAnswer(String answer) {
        answerView.setText(answer.trim());
    }

    /*
     * Display an error message on the screen.
     * This method is used to show any errors that occur during the API call.
     */
    private void displayError(String errorMessage) {
        Toast.makeText(this, errorMessage, Toast.LENGTH_LONG).show();

        TextView errorView = new TextView(this);
        errorView.setText(errorMessage);
        insightsContainer.addView(errorView);
    }
}
